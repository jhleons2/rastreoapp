/**
 * Bot de WhatsApp para solicitar ubicaciones
 * Usa whatsapp-web.js para conectar con WhatsApp
 */

const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const axios = require('axios');

class WhatsAppBotService {
  constructor() {
    this.client = null;
    this.ready = false;
    this.userSessions = new Map(); // { phone_number: { chatId, linked } }
  }

  /**
   * Inicializar el bot de WhatsApp
   */
  async init() {
    try {
      console.log('[WhatsApp Bot] Initializing...');
      
      this.client = new Client({
        authStrategy: new LocalAuth(),
        puppeteer: {
          headless: true,
          args: ['--no-sandbox', '--disable-setuid-sandbox']
        }
      });

      // Generar QR para escanear
      this.client.on('qr', (qr) => {
        console.log('[WhatsApp Bot] QR Code generated. Scan with WhatsApp:');
        qrcode.generate(qr, { small: true });
        console.log('\n[WhatsApp Bot] Scan the QR code above with your WhatsApp mobile app\n');
      });

      // Conectado y listo
      this.client.on('ready', () => {
        console.log('[WhatsApp Bot] Client is ready!');
        this.ready = true;
      });

      // Error de autenticaci√≥n
      this.client.on('auth_failure', (msg) => {
        console.error('[WhatsApp Bot] Authentication failed:', msg);
      });

      // Desconectado
      this.client.on('disconnected', (reason) => {
        console.log('[WhatsApp Bot] Client was disconnected:', reason);
        this.ready = false;
      });

      // Mensaje recibido
      this.client.on('message', async (msg) => {
        await this.handleMessage(msg);
      });

      // Ubicaci√≥n recibida
      this.client.on('message_create', async (msg) => {
        if (msg.type === 'location') {
          await this.handleLocation(msg);
        }
      });

      // Inicializar
      await this.client.initialize();
    } catch (error) {
      console.error('[WhatsApp Bot] Error initializing:', error);
    }
  }

  /**
   * Manejar mensajes de texto
   */
  async handleMessage(msg) {
    const chat = await msg.getChat();
    const contact = await msg.getContact();
    const from = contact.number;
    const messageText = msg.body.toLowerCase().trim();

    console.log(`[WhatsApp Bot] Message from ${from}: ${messageText}`);

    // Comandos
    if (messageText.startsWith('!start') || messageText === 'start' || messageText === 'iniciar') {
      await msg.reply(
        'üëã *¬°Hola! Bienvenido a Rastreo App*\n\n' +
        'üì± *Comandos disponibles:*\n' +
        '‚Ä¢ *iniciar* - Mostrar este mensaje\n' +
        '‚Ä¢ *vincular <numero>* - Vincular con n√∫mero telef√≥nico\n' +
        '‚Ä¢ *ubicacion* - Solicitar env√≠o de ubicaci√≥n\n' +
        '‚Ä¢ *ayuda* - Ver ayuda\n\n' +
        'Para enviar tu ubicaci√≥n, usa el bot√≥n de ubicaci√≥n en WhatsApp.'
      );
    } else if (messageText.startsWith('!vincular') || messageText.startsWith('vincular')) {
      const match = messageText.match(/vincular\s*(\+?\d+)/);
      if (match) {
        const phoneNumber = match[1];
        this.userSessions.set(from, { phoneNumber, linked: true, chatId: from });
        await msg.reply(
          `‚úÖ *Vinculado exitosamente*\n\n` +
          `N√∫mero: ${phoneNumber}\n` +
          `Puedes enviar tu ubicaci√≥n ahora.`
        );
      } else {
        await msg.reply('‚ùå Formato incorrecto. Usa: *vincular +573001234567*');
      }
    } else if (messageText.includes('ubicacion') || messageText.includes('ubicaci√≥n')) {
      await msg.reply(
        'üìç *Env√≠o de Ubicaci√≥n*\n\n' +
        'Para enviar tu ubicaci√≥n:\n' +
        '1. Toca el bot√≥n üìé en WhatsApp\n' +
        '2. Selecciona "Ubicaci√≥n"\n' +
        '3. Env√≠a tu ubicaci√≥n actual\n\n' +
        'Tu ubicaci√≥n ser√° registrada autom√°ticamente.'
      );
    } else if (messageText.includes('ayuda') || messageText === 'help') {
      await msg.reply(
        'üì± *Rastreo App - Ayuda*\n\n' +
        'Este bot te permite enviar tu ubicaci√≥n geogr√°fica.\n\n' +
        '*Comandos:*\n' +
        '‚Ä¢ *iniciar* - Iniciar bot\n' +
        '‚Ä¢ *vincular <numero>* - Vincular n√∫mero\n' +
        '‚Ä¢ *ubicacion* - Solicitar ubicaci√≥n\n' +
        '‚Ä¢ *ayuda* - Esta ayuda\n\n' +
        '*Uso:*\n' +
        '1. Vincula tu n√∫mero con: *vincular + Canales de comunicaci√≥n*57XXXXXXXX*\n' +
        '2. Env√≠a tu ubicaci√≥n con el bot√≥n üìé\n' +
        '3. Tu ubicaci√≥n ser√° registrada autom√°ticamente.'
      );
    }
  }

  /**
   * Manejar ubicaci√≥n recibida
   */
  async handleLocation(msg) {
    try {
      const location = msg.location;
      const contact = await msg.getContact();
      const from = contact.number;
      const session = this.userSessions.get(from);

      if (!session || !session.linked) {
        await msg.reply(
          '‚ö†Ô∏è *No est√°s vinculado*\n\n' +
          'Primero debes vincular tu n√∫mero con: *vincular +57XXXXXXXX*'
        );
        return;
      }

      // Guardar ubicaci√≥n (aqu√≠ podr√≠as enviarla al backend)
      const locationData = {
        latitude: location.latitude,
        longitude: location.longitude,
        timestamp: new Date(),
        phoneNumber: session.phoneNumber
      };

      console.log('[WhatsApp Bot] Location received:', locationData);

      // Obtener direcci√≥n mediante geocodificaci√≥n inversa
      const address = await this.getAddress(location.latitude, location.longitude);

      await msg.reply(
        '‚úÖ *Ubicaci√≥n recibida*\n\n' +
        `üìç Lat: ${location.latitude}\n` +
        `üìç Lng: ${location.longitude}\n` +
        `üè† ${address}\n` +
        `‚è∞ ${new Date().toLocaleString('es-ES')}\n\n` +
        'Tu ubicaci√≥n ha sido registrada correctamente.'
      );
    } catch (error) {
      console.error('[WhatsApp Bot] Error handling location:', error);
      await msg.reply('‚ùå Error al procesar ubicaci√≥n. Intenta de nuevo.');
    }
  }

  /**
   * Obtener direcci√≥n a partir de coordenadas
   */
  async getAddress(latitude, longitude) {
    try {
      const response = await axios.get('https://nominatim.openstreetmap.org/reverse', {
        params: {
          lat: latitude,
          lon: longitude,
          format: 'json'
        },
        headers: {
          'User-Agent': 'RastreoApp'
        }
      });

      if (response.data && response.data.display_name) {
        return response.data.display_name;
      }
      return 'Direcci√≥n no disponible';
    } catch (error) {
      return 'Direcci√≥n no disponible';
    }
  }

  /**
   * Verificar si el bot est√° listo
   */
  isReady() {
    return this.ready;
  }

  /**
   * Enviar mensaje a un n√∫mero
   */
  async sendMessage(phoneNumber, message) {
    if (!this.ready) {
      console.error('[WhatsApp Bot] Client is not ready');
      return false;
    }

    try {
      const number = phoneNumber.includes('@') ? phoneNumber : `${phoneNumber}@c.us`;
      await this.client.sendMessage(number, message);
      return true;
    } catch (error) {
      console.error('[WhatsApp Bot] Error sending message:', error);
      return false;
    }
  }

  /**
   * Solicitar ubicaci√≥n a un usuario
   */
  async requestLocation(phoneNumber) {
    return await this.sendMessage(
      phoneNumber,
      'üìç Por favor, env√≠a tu ubicaci√≥n actual:\n\n' +
      '1. Toca el bot√≥n üìé\n' +
      '2. Selecciona "Ubicaci√≥n"\n' +
      '3. Env√≠a'
    );
  }
}

// Exportar instancia singleton
const whatsappBot = new WhatsAppBotService();

module.exports = whatsappBot;

